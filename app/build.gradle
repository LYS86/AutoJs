apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'

def SupportLibVersion = '28.0.0'

configurations.configureEach {
    resolutionStrategy {
        force "com.android.support:appcompat-v7:${SupportLibVersion}"
        force "com.android.support:support-v4:${SupportLibVersion}"
    }
}

android {
    compileSdkVersion versions.compile
    buildToolsVersion versions.buildTool
    defaultConfig {
        applicationId "org.autojs.autojs"
        minSdkVersion versions.mini
        targetSdkVersion versions.target
        versionCode versions.appVersionCode
        versionName versions.appVersionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
    }
    buildTypes {
        debug {
            shrinkResources false
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        release {
            shrinkResources false
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
        encoding = 'utf-8'
    }

    configurations.configureEach {
        resolutionStrategy.force 'com.google.code.findbugs:jsr305:3.0.1'
    }

    flavorDimensions "channel"
    splits {

        // Configures multiple APKs based on ABI.
        abi {

            // Enables building multiple APKs per ABI.
            enable true

            // By default all ABIs are included, so use reset() and include to specify that we only
            // want APKs for x86 and x86_64.

            // Resets the list of ABIs that Gradle should create APKs for to none.
            reset()

            // Specifies a list of ABIs that Gradle should create APKs for.
            include "x86", "armeabi-v7a"

            // Specifies that we do not want to also generate a universal APK that includes all ABIs.
            universalApk false
        }
    }
    productFlavors {
        common {
            buildConfigField "String", "CHANNEL", '"common"'
        }
        coolapk {
            buildConfigField "String", "CHANNEL", '"coolapk"'
        }
    }
    namespace 'org.autojs.autojs'
    lint {
        abortOnError false
        disable 'MissingTranslation', 'ExtraTranslation'
    }
    buildFeatures {
        viewBinding true
    }
}

dependencies {
    androidTestImplementation(libs.espresso.core) {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    testImplementation libs.junit
    debugImplementation libs.leakcanary.android

    // Kotlin
    implementation libs.kotlinx.coroutines.android
    // Android supports
    implementation libs.appcompat
    implementation libs.androidx.cardview
    implementation libs.material
    implementation libs.androidx.multidex
    // Personal libraries
    implementation libs.mutabletheme
    // Material Dialogs
    implementation(libs.material.dialogs.core){
        exclude group: 'com.android.support'
    }

    // Common Markdown
    implementation libs.commonmark.java
    // Android issue reporter (a github issue reporter)
    implementation(libs.android.issue.reporter){
        exclude group: 'com.afollestad.material-dialogs'
        exclude group: 'com.android.support'
    }
    //MultiLevelListView
    implementation libs.android.multi.level.listview
    //Licenses Dialog
    implementation libs.licensesdialog
    //Expandable RecyclerView
    implementation libs.expandablerecyclerview
    //FlexibleDivider
    implementation libs.recyclerview.flexibledivider
    implementation libs.library
    //Commons-lang
    implementation libs.commons.lang3
    //Expandable RecyclerView
    implementation libs.thoughtbot.expandablerecyclerview
//    implementation 'com.github.hyb1996:Auto.js-ApkBuilder:1.0.1' //依赖失效
    // RxJava
    implementation libs.rxjava
    implementation libs.rxandroid
    // Retrofit
    implementation libs.retrofit
    implementation libs.converter.gson
    implementation libs.retrofit2.rxjava2.adapter
    implementation libs.retrofit2.kotlin.coroutines.adapter
    //Glide
    implementation(libs.glide) {
        exclude group: 'com.android.support'
    }
    kapt libs.compiler
    //joda time
    implementation libs.joda.time
    // Tasker Plugin
    implementation libs.android.plugin.client.sdk.for1.locale
    // Bugly
    implementation libs.crashreport
    // MaterialDialogCommon
    implementation(libs.commons) {
        exclude group: 'com.android.support'
    }
    // Android job
    implementation libs.android.job
    // Project modules
    implementation project(':autojs')
    implementation libs.commons.io
}
